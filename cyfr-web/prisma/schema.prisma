generator client {
  provider = "prisma-client-js"
}

// DIRECT
// datasource db {
//   provider          = "postgresql"
//   url               = env("HEROKU_DATABASE_URL_PROD")
//   shadowDatabaseUrl = env("HEROKU_DATABASE_URL_STAGE")
// }

// PROXY
datasource db {
  provider          = "postgresql"
  url               = env("PRISMA_HEROKU_PROXY")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  fanOf         Fan[]     @relation("user_fans")
  fans          Fan[]     @relation("user_fan_of")
  follower      Follow[]  @relation("user_followed_by")
  following     Follow[]  @relation("user_following")
  galleries     Gallery[] @relation("user_galleries")
  images        Image[]   @relation("user_images")
  likes         Like[]    @relation("user_likes")
  posts         Post[]    @relation("user_posts")
  sessions      Session[]
  shares        Share[]   @relation("user_shares")
  chats ChatRoom[] @relation("user_chats")
  chatMessages  ChatMessage[] @relation("user_chat_messages")
}

model Post {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  visible       Boolean  @default(true)
  content       String?
  shareId       String?
  commentId     String?
  authorId      String
  likes         Like[]   @relation("post_likes")
  author        User     @relation("user_posts", fields: [authorId], references: [id])
  comment       Post?    @relation("post_comments", fields: [commentId], references: [id])
  post_comments Post[]   @relation("post_comments")
  shares        Share[]  @relation("post_shares")
  images        Image[]  @relation("post_images")
}

model Gallery {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  visible     Boolean  @default(true)
  title       String?
  description String?
  authorId    String
  shareId     String?
  author      User     @relation("user_galleries", fields: [authorId], references: [id])
  images      Image[]  @relation("gallery_images")
  likes       Like[]   @relation("gallery_likes")
  shares      Share[]  @relation("gallery_shares")
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  visible   Boolean  @default(true)
  url       String
  title     String?
  authorId  String
  galleryId String?
  postId    String?
  shareId   String?
  author    User     @relation("user_images", fields: [authorId], references: [id])
  gallery   Gallery? @relation("gallery_images", fields: [galleryId], references: [id])
  post      Post?    @relation("post_images", fields: [postId], references: [id])
  likes     Like[]   @relation("image_likes")
  shares    Share[]  @relation("image_shares")
}

model Like {
  id        String   @id @default(cuid())
  authorId  String
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  galleryId String?
  imageId   String?
  author    User     @relation("user_likes", fields: [authorId], references: [id])
  gallery   Gallery? @relation("gallery_likes", fields: [galleryId], references: [id])
  image     Image?   @relation("image_likes", fields: [imageId], references: [id])
  post      Post?    @relation("post_likes", fields: [postId], references: [id])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  visible   Boolean  @default(true)
  authorId  String
  postId    String?
  galleryId String?
  imageId   String?
  author    User     @relation("user_shares", fields: [authorId], references: [id])
  gallery   Gallery? @relation("gallery_shares", fields: [galleryId], references: [id])
  image     Image?   @relation("image_shares", fields: [imageId], references: [id])
  post      Post?    @relation("post_shares", fields: [postId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  follower    User     @relation("user_followed_by", fields: [followerId], references: [id])
  following   User     @relation("user_following", fields: [followingId], references: [id])
}

model Fan {
  id        String   @id @default(cuid())
  fanId     String
  fanOfId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  fan       User     @relation("user_fans", fields: [fanId], references: [id])
  fanOf     User     @relation("user_fan_of", fields: [fanOfId], references: [id])
}

model ChatRoom {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  visible       Boolean  @default(true)
  users User[]  @relation("user_chats")
  messages  ChatMessage[]
}

model ChatMessage {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  visible       Boolean  @default(true)
  seen          Boolean @default(false)
  chatRoomId  String
  chatRoom  ChatRoom  @relation(fields: [chatRoomId], references: [id])
  authorId    String
  author    User @relation("user_chat_messages", fields: [authorId], references: [id])
  content String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
