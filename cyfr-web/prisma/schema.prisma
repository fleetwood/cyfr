generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("REACT_APP_DATABASE_URL")
}

model Post {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  visible       Boolean  @default(true)
  content       String?
  shareId       String?
  commentId     String?
  comment       Post?    @relation("post_comments", fields: [commentId], references: [id])
  post_comments Post[]   @relation("post_comments")
  authorId      String
  author        User     @relation("user_posts", fields: [authorId], references: [id])
  likes         Like[]   @relation("post_likes")
  shares        Share[]  @relation("post_shares")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  fanOf         Fan[]     @relation("user_fans")
  fans          Fan[]     @relation("user_fan_of")
  follower      Follow[]  @relation("user_followed_by")
  following     Follow[]  @relation("user_following")
  posts         Post[]    @relation("user_posts")
  sessions      Session[]
  likes         Like[]    @relation("user_likes")
  shares        Share[]   @relation("user_shares")
}

model Like {
  id       String  @id @default(cuid())
  authorId String
  author   User    @relation("user_likes", fields: [authorId], references: [id])
  postId   String?
  post     Post?   @relation("post_likes", fields: [postId], references: [id])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  visible   Boolean  @default(true)
  authorId  String
  author    User     @relation("user_shares", fields: [authorId], references: [id])
  postId    String?
  post      Post?    @relation("post_shares", fields: [postId], references: [id])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("user_followed_by", fields: [followerId], references: [id])
  following   User   @relation("user_following", fields: [followingId], references: [id])
}

model Fan {
  id      String @id @default(cuid())
  fanId   String
  fanOfId String
  fan     User   @relation("user_fans", fields: [fanId], references: [id])
  fanOf   User   @relation("user_fan_of", fields: [fanOfId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
