{
	// Place your cyfr-web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript, typescriptreact",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Use State" : {
		"scope": "javascript,typescript, typescriptreact",
		"prefix": "ust",
		"body": [
			"const [$1, set$1] => useState<$2>($0)",
		],
		"description": "Log output to console"
	},
	"Functional Component with Type Props" : {
		"scope": "javascript,typescript, typescriptreact",
		"prefix": "cfc",
		"body": [
			"type $1Props = {",
			"   $2: $3",
			"}",
			"",
			"const $1 = ({ $2 }: $1Props) => ",
			"   return (",
			"   $0",
			"   {$2}",
			")",
			"export default $1"
		],
		"description": "Log output to console"
	},
	"API GET handler" : {
		"scope": "javascript,typescript, typescriptreact",
		"prefix": "apgh",
		"body": [
			"import { NextApiRequest, NextApiResponse } from \"next\"",
			"",
			"import { GetResponseError, ResponseError, ResponseResult } from \"../../../types/response\"",
			"import { logError, todo } from \"../../../utils/log\"",
			"",
			"export default async function handle(",
			"   req: NextApiRequest,",
			"   res: NextApiResponse<ResponseResult<$1>>",
			") {",
			"   const { $1 } = req.body.body",
			"   const code = `api/$1`",
			"   try {",
			"      const result = await $0",
			"      if (result) {",
			"         res.status(200).json({ result })",
			"      } else {",
			"         throw { code, message: `No results from $1` }",
			"      }",
			"      if (result) {",
			"         res.status(200).json({ result })",
			"      } else {",
			"         throw { code, message: `Failed to create $1` }",
			"      }",
			"   } catch (e: Error | ResponseError | any) {",
			"      logError(`\t$1 FAIL`, e)",
			"      const error = GetResponseError(e)",
			"      res.status(500).json({ error })",
			"   }",
			"}"
		],
		"description": "Log output to console"
	},
}