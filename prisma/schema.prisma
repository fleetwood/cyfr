generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DIGITAL_OCEAN_CYFR_DB_DEV")
  shadowDatabaseUrl = env("DIGITAL_OCEAN_CYFR_DB_SHADOW")
}

model User {
  id            String        @id @default(cuid())
  name          String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  slug          String?       @unique
  description   String?
  membershipId  String?       @unique
  accounts      Account[]
  blocks        Block[]       @relation("user_blocks")
  isBlocked     Block[]       @relation("user_is_blocked")
  chatMessages  ChatMessage[] @relation("user_chat_messages")
  comments      Comment[]     @relation("user_comments")
  ownedCommunes Commune[]     @relation("commune_owner")
  communes      CommuneUser[] @relation("user_in_commune")
  covers        Cover[]       @relation("user_covers")
  follower      Follow[]      @relation("user_followed_by")
  following     Follow[]      @relation("user_following")
  galleries     Gallery[]     @relation("user_galleries")
  images        Image[]       @relation("user_images")
  likes         Like[]        @relation("user_likes")
  notifs        Notif[]       @relation("user_notifs")
  posts         Post[]        @relation("user_posts")
  sessions      Session[]
  shares        Share[]       @relation("user_shares")
  membership    Membership?   @relation("user_membership", fields: [membershipId], references: [id])
  agents        Agent[]       @relation("agent_authors")
  attending     Event[]       @relation("event_attendees")
  hosting       Event[]       @relation("event_hosts")
  books         Book[]        @relation("user_books")
  chats         ChatRoom[]    @relation("user_chats")

  @@index([id, name, email])
}

model News {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  slug            String         @unique
  title           String         @unique
  content         String         @unique
  banner          String?
  startDate       DateTime?
  endDate         DateTime?
  postId          String         @unique
  views           Int            @default(0)
  priority        Int            @default(0)
  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("news_comments", fields: [commentThreadId], references: [id])
}

model Gallery {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime   @default(now()) @db.Timestamptz(3)
  visible           Boolean    @default(true)
  title             String?
  description       String?
  authorId          String
  shareId           String?
  blocking          Block[]    @relation("blocked_from_gallery")
  book_gallery      Book?      @relation("book_gallery")
  chapter_gallery   Chapter?   @relation("chapter_gallery")
  character_gallery Character? @relation("character_gallery")
  commune           Commune?   @relation("gallery_commune")
  author            User       @relation("user_galleries", fields: [authorId], references: [id])
  images            Image[]    @relation("gallery_images")
  likes             Like[]     @relation("gallery_likes")
  shares            Share[]    @relation("gallery_shares")
}

model Image {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  title           String?
  authorId        String
  galleryId       String?
  shareId         String?
  url             String         @unique
  postId          String?
  height          Int?           @default(0)
  width           Int?           @default(0)
  commentThreadId String?        @unique
  cover           Cover?         @relation("cover_image")
  author          User           @relation("user_images", fields: [authorId], references: [id])
  commentThread   CommentThread? @relation("image_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("gallery_images", fields: [galleryId], references: [id])
  post            Post?          @relation("post_images", fields: [postId], references: [id])
  likes           Like[]         @relation("image_likes")
  shares          Share[]        @relation("image_shares")
}

model Cover {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  exclusive       Boolean        @default(false)
  authorId        String
  bookId          String?        @unique
  imageId         String         @unique
  genreId         String?
  description     String?
  commentThreadId String?        @unique
  author          User           @relation("user_covers", fields: [authorId], references: [id])
  book            Book?          @relation("book_cover", fields: [bookId], references: [id])
  commentThread   CommentThread? @relation("cover_comments", fields: [commentThreadId], references: [id])
  genre           Genre?         @relation("genre_covers", fields: [genreId], references: [id])
  image           Image          @relation("cover_image", fields: [imageId], references: [id])
  likes           Like[]         @relation("cover_likes")
  shares          Share[]        @relation("cover_shares")
}

model Like {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  authorId    String
  postId      String?
  galleryId   String?
  imageId     String?
  commentId   String?
  characterId String?
  bookId      String?
  coverId     String?
  author      User       @relation("user_likes", fields: [authorId], references: [id])
  book        Book?      @relation("book_likes", fields: [bookId], references: [id])
  character   Character? @relation("character_likes", fields: [characterId], references: [id])
  comment     Comment?   @relation("comment_likes", fields: [commentId], references: [id])
  cover       Cover?     @relation("cover_likes", fields: [coverId], references: [id])
  gallery     Gallery?   @relation("gallery_likes", fields: [galleryId], references: [id])
  image       Image?     @relation("image_likes", fields: [imageId], references: [id])
  post        Post?      @relation("post_likes", fields: [postId], references: [id])

  @@index([id, authorId, postId])
}

model Share {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  visible     Boolean    @default(true)
  authorId    String
  postId      String?
  galleryId   String?
  imageId     String?
  characterId String?
  bookId      String?
  coverId     String?
  author      User       @relation("user_shares", fields: [authorId], references: [id])
  book        Book?      @relation("book_shares", fields: [bookId], references: [id])
  character   Character? @relation("character_shares", fields: [characterId], references: [id])
  cover       Cover?     @relation("cover_shares", fields: [coverId], references: [id])
  gallery     Gallery?   @relation("gallery_shares", fields: [galleryId], references: [id])
  image       Image?     @relation("image_shares", fields: [imageId], references: [id])
  post        Post?      @relation("post_shares", fields: [postId], references: [id])

  @@index([id, authorId, postId])
}

model Follow {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  isFan       Boolean    @default(false)
  /// User is ollowed by
  followerId  String
  /// User is following
  followingId String?
  characterId String?
  bookId      String?
  book        Book?      @relation("book_follows", fields: [bookId], references: [id])
  character   Character? @relation("character_follows", fields: [characterId], references: [id])
  follower    User       @relation("user_followed_by", fields: [followerId], references: [id])
  following   User?      @relation("user_following", fields: [followingId], references: [id])

  @@index([id, followerId, followingId])
}

model ChatRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @default(now()) @db.Timestamptz(3)
  visible   Boolean       @default(true)
  party     String        @unique
  messages  ChatMessage[]
  users     User[]        @relation("user_chats")
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @default(now()) @db.Timestamptz(3)
  visible    Boolean  @default(true)
  seen       Boolean  @default(false)
  chatRoomId String
  authorId   String
  content    String
  author     User     @relation("user_chat_messages", fields: [authorId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model CommentThread {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime   @default(now()) @db.Timestamptz(3)
  requiredRole Role       @default(VIEW)
  blocked      Block[]    @relation("blocked_from_thread")
  book         Book?      @relation("book_comments")
  chapter      Chapter?   @relation("chapter_comments")
  character    Character? @relation("character_comments")
  comments     Comment[]  @relation("thread_comments")
  commune      Commune?   @relation("thread_commune")
  cover        Cover?     @relation("cover_comments")
  event        Event?     @relation("event_comments")
  image        Image?     @relation("image_comments")
  news         News?      @relation("news_comments")
  post         Post?      @relation("post_comments")
  review       Review?    @relation("review_comments")
}

model Address {
  id               String     @id @default(cuid())
  country          String
  /// State, County, Etc
  district         String
  /// Including number + street
  street           String
  postcode         String
  eventAddress     Event?     @relation("event_address")
  publisherAddress Publisher? @relation("publisher_address")
}

model Editor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  books     Book[]   @relation("book_editors")
}

model Notif {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  expiresAt DateTime? @db.Timestamptz(3)
  visible   Boolean   @default(true)
  seen      Boolean   @default(false)
  notifId   String?
  notifType NotifType
  message   String?
  userId    String?
  eventId   String?
  event     Event?    @relation("event_notifs", fields: [eventId], references: [id])
  user      User?     @relation("user_notifs", fields: [userId], references: [id])
}

model Agent {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @default(now()) @db.Timestamptz(3)
  visible     Boolean   @default(true)
  description String?
  publisherId String
  publisher   Publisher @relation("publisher_agent", fields: [publisherId], references: [id])
  authors     User[]    @relation("agent_authors")
  books       Book[]    @relation("book_agents")

  @@index([id])
}

model Publisher {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  visible     Boolean  @default(true)
  name        String
  addressId   String?  @unique
  description String?
  agents      Agent[]  @relation("publisher_agent")
  books       Book[]   @relation("book_publisher")
  address     Address? @relation("publisher_address", fields: [addressId], references: [id])

  @@index([id])
}

model Event {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  startAt         DateTime       @db.Timestamptz(3)
  endAt           DateTime       @db.Timestamptz(3)
  attendeeLimit   Int            @default(0)
  visible         Boolean        @default(true)
  title           String
  description     String
  commentThreadId String?        @unique
  addressId       String?        @unique
  address         Address?       @relation("event_address", fields: [addressId], references: [id])
  commentThread   CommentThread? @relation("event_comments", fields: [commentThreadId], references: [id])
  notifs          Notif[]        @relation("event_notifs")
  attendees       User[]         @relation("event_attendees")
  hosts           User[]         @relation("event_hosts")
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
}

model Review {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("review_comments", fields: [commentThreadId], references: [id])
}

model Comment {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt DateTime       @default(now()) @db.Timestamptz(3)
  threadId  String
  authorId  String
  content   String
  visible   Boolean        @default(true)
  author    User           @relation("user_comments", fields: [authorId], references: [id])
  thread    CommentThread? @relation("thread_comments", fields: [threadId], references: [id])
  likes     Like[]         @relation("comment_likes")
}

model Commune {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @default(now()) @db.Timestamptz(3)
  description String?
  ownerId     String
  galleryId   String?        @unique
  threadId    String?        @unique
  gallery     Gallery?       @relation("gallery_commune", fields: [galleryId], references: [id])
  owner       User           @relation("commune_owner", fields: [ownerId], references: [id])
  thread      CommentThread? @relation("thread_commune", fields: [threadId], references: [id])
  users       CommuneUser[]  @relation("commune_users")
}

model CommuneUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  communeId String
  userId    String
  role      Role     @default(VIEW)
  commune   Commune  @relation("commune_users", fields: [communeId], references: [id])
  user      User     @relation("user_in_commune", fields: [userId], references: [id])
}

model Membership {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @default(now()) @db.Timestamptz(3)
  expiresAt   DateTime?
  visible     Boolean        @default(true)
  description String?
  typeId      String
  type        MembershipType @relation("membership_type", fields: [typeId], references: [id])
  user        User?          @relation("user_membership")

  @@index([id])
}

model MembershipType {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime     @default(now()) @db.Timestamptz(3)
  level       Int
  name        String
  memberships Membership[] @relation("membership_type")

  @@index([id])
}

model Genre {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  slug        String   @unique
  title       String   @unique
  description String
  books       Book[]   @relation("book_genre")
  covers      Cover[]  @relation("genre_covers")
}

model BookCategory {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  title       String
  description String?
  books       Book[]   @relation("book_categories")
}

model Book {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  startedAt       DateTime?      @db.Timestamptz(3)
  completeAt      DateTime?      @db.Timestamptz(3)
  visible         Boolean        @default(true)
  prospect        Boolean        @default(false)
  fiction         Boolean        @default(true)
  status          BookStatus?    @default(PRIVATE)
  title           String         @unique
  slug            String         @unique
  hook            String?
  synopsis        String?
  back            String?
  words           Int            @default(0)
  reads           Int            @default(0)
  purchases       Int            @default(0)
  genreId         String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  publisherId     String?
  commentThread   CommentThread? @relation("book_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("book_gallery", fields: [galleryId], references: [id])
  genre           Genre          @relation("book_genre", fields: [genreId], references: [id])
  publisher       Publisher?     @relation("book_publisher", fields: [publisherId], references: [id])
  chapters        Chapter[]      @relation("book_chapters")
  cover           Cover?         @relation("book_cover")
  follows         Follow[]       @relation("book_follows")
  likes           Like[]         @relation("book_likes")
  shares          Share[]        @relation("book_shares")
  agent           Agent[]        @relation("book_agents")
  categories      BookCategory[] @relation("book_categories")
  characters      Character[]    @relation("book_characters")
  editor          Editor[]       @relation("book_editors")
  authors         User[]         @relation("user_books")
}

model Post {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  content         String?
  shareId         String?
  commentId       String?
  authorId        String
  commentThreadId String?        @unique
  images          Image[]        @relation("post_images")
  likes           Like[]         @relation("post_likes")
  author          User           @relation("user_posts", fields: [authorId], references: [id])
  commentThread   CommentThread? @relation("post_comments", fields: [commentThreadId], references: [id])
  shares          Share[]        @relation("post_shares")

  @@index([id, authorId, shareId, visible, createdAt])
}

model Character {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  name            String
  familyName      String
  givenName       String
  middleName      String
  thumbnail       String
  age             String
  role            String
  description     String
  backstory       String
  title           String
  archetype       String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("character_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("character_gallery", fields: [galleryId], references: [id])
  follows         Follow[]       @relation("character_follows")
  likes           Like[]         @relation("character_likes")
  shares          Share[]        @relation("character_shares")
  books           Book[]         @relation("book_characters")
  chapters        Chapter[]      @relation("chapter_characters")
}

model Chapter {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  order           Int
  title           String
  content         String         @default("")
  words           Int            @default(0)
  reads           Int            @default(0)
  bookId          String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  book            Book           @relation("book_chapters", fields: [bookId], references: [id])
  commentThread   CommentThread? @relation("chapter_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("chapter_gallery", fields: [galleryId], references: [id])
  characters      Character[]    @relation("chapter_characters")
}

model Block {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime       @default(now()) @db.Timestamptz(3)
  expiresAt      DateTime?
  visible        Boolean        @default(true)
  blockType      BlockType
  authorId       String
  blockedId      String
  galleryId      String?
  threadId       String?
  userId         String
  author         User           @relation("user_blocks", fields: [authorId], references: [id])
  blockedGallery Gallery?       @relation("blocked_from_gallery", fields: [galleryId], references: [id])
  blockedThread  CommentThread? @relation("blocked_from_thread", fields: [threadId], references: [id])
  user           User           @relation("user_is_blocked", fields: [userId], references: [id])

  @@index([id, userId, authorId, threadId, blockType])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  BLOCKED
  VIEW
  COMMENT
  REVIEW
  EDIT
  ADMIN
  OWNER
}

enum BookStatus {
  PRIVATE
  DRAFT
  MANUSCRIPT
  PUBLISHED
}

enum Visibility {
  PUBLIC
  READERS
  REVIEWERS
  ARTISTS
  AUTHORS
  AGENTS
  COMMUNE
  ADMIN
}

enum BlockType {
  BOOK
  GALLERY
  THREAD
  USER
  SITE
}

enum NotifType {
  BOOK
  REVIEW
  SUBMISSION
  COMMENT
  LIKE
  SHARE
  FOLLOW
  FAN
  CHAT
  EVENT
  BLOCK
}
