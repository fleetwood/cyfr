generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DIGITAL_OCEAN_CYFR_DB_DEV")
  shadowDatabaseUrl = env("DIGITAL_OCEAN_CYFR_DB_SHADOW")
}

model Block {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime       @default(now()) @db.Timestamptz(3)
  expiresAt      DateTime?
  visible        Boolean        @default(true)
  blockType      BlockType
  creatorId      String
  blockedId      String
  galleryId      String?
  threadId       String?
  userId         String
  creator        User           @relation("user_blocks", fields: [creatorId], references: [id])
  blockedGallery Gallery?       @relation("blocked_from_gallery", fields: [galleryId], references: [id])
  blockedThread  CommentThread? @relation("blocked_from_thread", fields: [threadId], references: [id])
  user           User           @relation("user_is_blocked", fields: [userId], references: [id])

  @@index([id, userId, creatorId, threadId, blockType])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  slug          String?   @unique
  description   String?

  membershipId String?     @unique
  membership   Membership? @relation("user_membership", fields: [membershipId], references: [id])
  accounts     Account[]

  events        Event[]       @relation("user_events")
  shares        Share[]       @relation("user_shares")
  likes         Like[]        @relation("user_likes") // for keeping track of how many likes a user has given
  authorLikes   Like[]        @relation("author_likes") // for how many times his user has been liked
  blocks        Block[]       @relation("user_blocks")
  isBlocked     Block[]       @relation("user_is_blocked")
  chatMessages  ChatMessage[] @relation("user_chat_messages")
  comments      Comment[]     @relation("user_comments")
  ownedCommunes Commune[]     @relation("commune_owner")
  communes      CommuneUser[] @relation("user_in_commune")
  covers        Cover[]       @relation("user_covers")
  follower      Follow[]      @relation("user_followed_by")
  following     Follow[]      @relation("user_following")
  galleries     Gallery[]     @relation("user_galleries")
  images        Image[]       @relation("user_images")
  notifs        Notif[]       @relation("user_notifs")
  posts         Post[]        @relation("user_posts")
  articles      Article[]     @relation("user_articles")
  sessions      Session[]

  agent       Agent?  @relation("user_agent") // user is an agent
  artist      Artist? @relation("user_artist") // user is an artist
  author      Author? @relation("user_author")
  editor      Editor? @relation("user_editor") // user is an editor
  reader      Reader? @relation("user_reader") // user is a reader

  agents      Agent[]      @relation("agent_authors")
  attending   Event[]      @relation("event_attendees")
  hosting     Event[]      @relation("event_hosts")
  books       Book[]       @relation("book_owner") // books this user has created
  chats       ChatRoom[]   @relation("user_chats")
  submissions Submission[] @relation("user_submission")
  reviews     Review[]     @relation("user_reviews") // reviews this user has written

  @@index([id, name, email])
}

model Author {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_author", fields: [userId], references: [id])

  books   Book[]   @relation("book_authors")
  reviews Review[] @relation("author_reviews")
  shares  Share[]  @relation("author_shares")
}

model Artist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_artist", fields: [userId], references: [id]) // user is an agent

  books     Book[]    @relation("book_artists")
  galleries Gallery[] @relation("gallery_artists")
  reviews   Review[]  @relation("artist_reviews")
  covers    Cover[]   @relation("cover_artists")
}

model Editor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_editor", fields: [userId], references: [id]) // user is an editor

  books   Book[]   @relation("book_editors")
  reviews Review[] @relation("editor_reviews")
}

model Reader {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_reader", fields: [userId], references: [id]) // user is an editor

  books   Book[]   @relation("book_readers")
  reviews Review[] @relation("reader_reviews")
}

model Agent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)

  description String?

  publisherId String?
  publisher   Publisher? @relation("publisher_agent", fields: [publisherId], references: [id])

  userId String @unique
  user   User   @relation("user_agent", fields: [userId], references: [id]) // user is an agent

  authors User[]   @relation("agent_authors")
  books   Book[]   @relation("book_agents")
  likes   Like[]   @relation("agent_likes")
  reviews Review[] @relation("agent_reviews")
  shares  Share[]  @relation("agent_shares")

  @@index([id])
}

model Article {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  
  creatorId       String?
  creator         User?           @relation("user_articles", fields: [creatorId], references: [id])

  type            ArticleType?    
  slug            String         @unique
  title           String         @unique
  content         String
  hook            String?
  banner          String?
  startDate       DateTime?
  endDate         DateTime?
  views           Int            @default(0)
  priority        Int            @default(0)
  reviewId        String?        @unique
  review          Review?        @relation("review_article", fields: [reviewId], references: [id])
  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("news_comments", fields: [commentThreadId], references: [id])

  shares          Share[]        @relation("article_shares")
  likes           Like[]         @relation("article_likes")

	@@map("News")
}

model Gallery {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  visible     Boolean  @default(true)
  title       String?
  description String?

  creatorId String
  creator   User   @relation("user_galleries", fields: [creatorId], references: [id])

  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("gallery_comments", fields: [commentThreadId], references: [id])

  // shareId           String?
  blocking          Block[]    @relation("blocked_from_gallery")
  book_gallery      Book?      @relation("book_gallery")
  chapter_gallery   Chapter?   @relation("chapter_gallery")
  character_gallery Character? @relation("character_gallery")
  commune           Commune?   @relation("gallery_commune")
  images            Image[]    @relation("gallery_images")
  likes             Like[]     @relation("gallery_likes")
  shares            Share[]    @relation("gallery_shares")
  artist            Artist[]   @relation("gallery_artists")

  permissionId String?     @unique
  permission   Permission? @relation("gallery_permission", fields: [permissionId], references: [id])
}

model Image {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  title           String?
  creatorId       String
  galleryId       String?
  shareId         String?
  url             String         @unique
  postId          String?
  height          Int?           @default(0)
  width           Int?           @default(0)
  commentThreadId String?        @unique
  cover           Cover?         @relation("cover_image")
  creator         User           @relation("user_images", fields: [creatorId], references: [id])
  commentThread   CommentThread? @relation("image_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("gallery_images", fields: [galleryId], references: [id])
  post            Post?          @relation("post_images", fields: [postId], references: [id])
  likes           Like[]         @relation("image_likes")
  shares          Share[]        @relation("image_shares")
}

model Cover {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  creatorId String
  creator   User     @relation("user_covers", fields: [creatorId], references: [id])

  exclusive   Boolean @default(false)
  description String?

  bookId String? @unique
  book   Book?   @relation("book_cover", fields: [bookId], references: [id])

  artists Artist[] @relation("cover_artists")

  genreId String?
  genre   Genre?  @relation("genre_covers", fields: [genreId], references: [id])

  imageId String @unique
  image   Image  @relation("cover_image", fields: [imageId], references: [id])

  likes   Like[]   @relation("cover_likes")
  shares  Share[]  @relation("cover_shares")
  reviews Review[] @relation("cover_reviews")
}

model Follow {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(3)
  isFan       Boolean    @default(false)
  /// User is ollowed by
  followerId  String
  /// User is following
  followingId String?
  characterId String?
  bookId      String?
  book        Book?      @relation("book_follows", fields: [bookId], references: [id])
  character   Character? @relation("character_follows", fields: [characterId], references: [id])
  follower    User       @relation("user_followed_by", fields: [followerId], references: [id])
  following   User?      @relation("user_following", fields: [followingId], references: [id])

  @@index([id, followerId, followingId])
}

model ChatRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @default(now()) @db.Timestamptz(3)
  visible   Boolean       @default(true)
  party     String        @unique
  messages  ChatMessage[]
  users     User[]        @relation("user_chats")
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @default(now()) @db.Timestamptz(3)
  visible    Boolean  @default(true)
  seen       Boolean  @default(false)
  chatRoomId String
  creatorId  String
  content    String
  creator    User     @relation("user_chat_messages", fields: [creatorId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model CommentThread {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @default(now()) @db.Timestamptz(3)
  blocked   Block[]    @relation("blocked_from_thread")
  book      Book?      @relation("book_comments")
  chapter   Chapter?   @relation("chapter_comments")
  character Character? @relation("character_comments")
  comments  Comment[]  @relation("thread_comments")
  commune   Commune?   @relation("thread_commune")
  event     Event?     @relation("event_comments")
  image     Image?     @relation("image_comments")
  news      Article?      @relation("news_comments")
  post      Post?      @relation("post_comments")
  review    Review?    @relation("review_comments")
  gallery   Gallery?   @relation("gallery_comments")
}

model Address {
  id               String     @id @default(cuid())
  country          String
  /// State, County, Etc
  district         String
  /// Including number + street
  street           String
  postcode         String
  eventAddress     Event?     @relation("event_address")
  publisherAddress Publisher? @relation("publisher_address")
}

model Notif {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  expiresAt DateTime? @db.Timestamptz(3)
  visible   Boolean   @default(true)
  seen      Boolean   @default(false)
  notifId   String?
  notifType NotifType
  message   String?
  userId    String?
  eventId   String?
  event     Event?    @relation("event_notifs", fields: [eventId], references: [id])
  user      User?     @relation("user_notifs", fields: [userId], references: [id])
}

model Publisher {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  visible     Boolean  @default(true)
  name        String
  addressId   String?  @unique
  description String?
  agents      Agent[]  @relation("publisher_agent")
  books       Book[]   @relation("book_publisher")
  address     Address? @relation("publisher_address", fields: [addressId], references: [id])
  likes       Like[]   @relation("publisher_likes")
  shares      Share[]  @relation("publisher_shares")

  @@index([id])
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  creatorId String
  creator   User   @relation("user_events", fields: [creatorId], references: [id])

  startAt         DateTime       @db.Timestamptz(3)
  endAt           DateTime       @db.Timestamptz(3)
  attendeeLimit   Int            @default(0)
  visible         Boolean        @default(true)
  title           String
  description     String
  commentThreadId String?        @unique
  addressId       String?        @unique
  address         Address?       @relation("event_address", fields: [addressId], references: [id])
  commentThread   CommentThread? @relation("event_comments", fields: [commentThreadId], references: [id])
  notifs          Notif[]        @relation("event_notifs")
  attendees       User[]         @relation("event_attendees")
  hosts           User[]         @relation("event_hosts")
  likes           Like[]         @relation("event_likes")
  shares          Share[]        @relation("event_shares")

  permissionId String?     @unique
  permission   Permission? @relation("event_permission", fields: [permissionId], references: [id])
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  creatorId String
  creator   User     @relation("user_submission", fields: [creatorId], references: [id])
  likes     Like[]   @relation("submission_likes")
  reviews   Review[] @relation("submission_reviews")
  shares    Share[]  @relation("submission_shares")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  creatorId String
  creator   User     @relation("user_reviews", fields: [creatorId], references: [id])

  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("review_comments", fields: [commentThreadId], references: [id])

  article  Article? @relation("review_article")

  authorId String?
  author   Author? @relation("author_reviews", fields: [authorId], references: [id])

  agentId String?
  agent   Agent?  @relation("agent_reviews", fields: [agentId], references: [id])

  artistId String?
  artist   Artist? @relation("artist_reviews", fields: [artistId], references: [id])

  editorId String?
  editor   Editor? @relation("editor_reviews", fields: [editorId], references: [id])

  bookId String?
  book   Book?   @relation("book_reviews", fields: [bookId], references: [id])

  characterId String?
  character   Character? @relation("character_reviews", fields: [characterId], references: [id])

  chapterId String?
  chapter   Chapter? @relation("chapter_reviews", fields: [chapterId], references: [id])

  submissionId String?
  submission   Submission? @relation("submission_reviews", fields: [submissionId], references: [id])

  coverId String?
  cover   Cover?  @relation("cover_reviews", fields: [coverId], references: [id])

  readerId String?
  readers  Reader? @relation("reader_reviews", fields: [readerId], references: [id])

  likes  Like[]  @relation("review_likes")
  shares Share[] @relation("review_shares")
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @default(now()) @db.Timestamptz(3)
  threadId  String
  creatorId String
  content   String
  visible   Boolean       @default(true)
  creator   User          @relation("user_comments", fields: [creatorId], references: [id])
  thread    CommentThread @relation("thread_comments", fields: [threadId], references: [id])
  likes     Like[]        @relation("comment_likes")
}

model Commune {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @default(now()) @db.Timestamptz(3)
  description  String?
  ownerId      String
  galleryId    String?        @unique
  threadId     String?        @unique
  permissionId String?        @unique
  permission   Permission?    @relation("commune_permission", fields: [permissionId], references: [id])
  gallery      Gallery?       @relation("gallery_commune", fields: [galleryId], references: [id])
  owner        User           @relation("commune_owner", fields: [ownerId], references: [id])
  thread       CommentThread? @relation("thread_commune", fields: [threadId], references: [id])
  users        CommuneUser[]  @relation("commune_users")
}

model CommuneUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  communeId String
  userId    String
  commune   Commune  @relation("commune_users", fields: [communeId], references: [id])
  user      User     @relation("user_in_commune", fields: [userId], references: [id])
}

model Membership {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @default(now()) @db.Timestamptz(3)
  expiresAt   DateTime?
  visible     Boolean        @default(true)
  description String?
  typeId      String
  type        MembershipType @relation("membership_type", fields: [typeId], references: [id])
  user        User?          @relation("user_membership")

  @@index([id])
}

model MembershipType {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  level       Int      @default(-1)
  paid        Boolean  @default(false)
  name        String   @default("Need a name")
  description String   @default("No description")

  monthlyDescription String @default("No description")
  monthlyPrice       Int    @default(-1)
  annualDescription  String @default("No description")
  annualPrice        Int    @default(-1)

  memberships Membership[] @relation("membership_type")

  @@index([id])
}

model Genre {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  slug        String   @unique
  title       String   @unique
  description String
  books       Book[]   @relation("book_genre")
  covers      Cover[]  @relation("genre_covers")
}

model BookCategory {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  title       String
  description String?
  books       Book[]   @relation("book_categories")
}

model Book {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  ownerId         String
  owner           User           @relation("book_owner", fields: [ownerId], references: [id])
  startedAt       DateTime?      @db.Timestamptz(3)
  completeAt      DateTime?      @db.Timestamptz(3)
  visible         Boolean        @default(true)
  prospect        Boolean        @default(false)
  fiction         Boolean        @default(true)
  status          BookStatus?    @default(PRIVATE)
  title           String         @unique
  slug            String         @unique
  ISBN            String?
  EISBN           String?
  hook            String?
  synopsis        String?
  back            String?
  words           Int            @default(0)
  reads           Int            @default(0)
  purchases       Int            @default(0)
  genreId         String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  publisherId     String?
  permissionId    String?        @unique
  commentThread   CommentThread? @relation("book_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("book_gallery", fields: [galleryId], references: [id])
  genre           Genre          @relation("book_genre", fields: [genreId], references: [id])
  publisher       Publisher?     @relation("book_publisher", fields: [publisherId], references: [id])
  chapters        Chapter[]      @relation("book_chapters")
  cover           Cover?         @relation("book_cover")
  follows         Follow[]       @relation("book_follows")
  likes           Like[]         @relation("book_likes")
  shares          Share[]        @relation("book_shares")
  agent           Agent[]        @relation("book_agents")
  categories      BookCategory[] @relation("book_categories")
  characters      Character[]    @relation("book_characters")
  editor          Editor[]       @relation("book_editors")
  authors         Author[]       @relation("book_authors")
  artists         Artist[]       @relation("book_artists")
  readers         Reader[]       @relation("book_readers")
  reviews         Review[]       @relation("book_reviews")
  permission      Permission?    @relation("book_permission", fields: [permissionId], references: [id])
}

model Permission {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @default(now()) @db.Timestamptz(3)
  book      Book?      @relation("book_permission")
  chapter   Chapter?   @relation("chapter_permission")
  character Character? @relation("character_permission")
  event     Event?     @relation("event_permission")
  gallery   Gallery?   @relation("gallery_permission")
  commune   Commune?   @relation("commune_permission")

  agent  Role[]
  editor Role[]
  author Role[]
  artist Role[]
  member Role[]
  public Role[]

  friend    Role[]
  stan      Role[]
  following Role[]
  fan       Role[]
  follower  Role[]
}

model Character {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(3)
  visible         Boolean        @default(true)
  name            String
  familyName      String
  givenName       String
  middleName      String
  thumbnail       String
  age             String
  role            String
  description     String
  backstory       String
  title           String
  archetype       String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("character_comments", fields: [commentThreadId], references: [id])

  permissionId String?     @unique
  permission   Permission? @relation("character_permission", fields: [permissionId], references: [id])

  gallery  Gallery?  @relation("character_gallery", fields: [galleryId], references: [id])
  follows  Follow[]  @relation("character_follows")
  likes    Like[]    @relation("character_likes")
  shares   Share[]   @relation("character_shares")
  books    Book[]    @relation("book_characters")
  chapters Chapter[] @relation("chapter_characters")
  reviews  Review[]  @relation("character_reviews")
}

model Chapter {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @default(now()) @db.Timestamptz(3)
  visible         Boolean  @default(true)
  order           Int
  title           String
  content         String   @default("")
  words           Int      @default(0)
  reads           Int      @default(0)
  bookId          String
  galleryId       String?  @unique
  commentThreadId String?  @unique

  permissionId String?     @unique
  permission   Permission? @relation("chapter_permission", fields: [permissionId], references: [id])

  book          Book           @relation("book_chapters", fields: [bookId], references: [id])
  commentThread CommentThread? @relation("chapter_comments", fields: [commentThreadId], references: [id])
  gallery       Gallery?       @relation("chapter_gallery", fields: [galleryId], references: [id])
  characters    Character[]    @relation("chapter_characters")
  reviews       Review[]       @relation("chapter_reviews")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
  visible   Boolean  @default(true)
  creatorId String
  creator   User     @relation("user_posts", fields: [creatorId], references: [id])

  content String?

  commentThreadId String?        @unique
  commentThread   CommentThread? @relation("post_comments", fields: [commentThreadId], references: [id])

  images Image[] @relation("post_images")
  likes  Like[]  @relation("post_likes")

  // A share that is attached to this post
  share Share? @relation("attaching_post")

  // these are all the shares for this post
  shares Share[] @relation("post_shares")

  @@index([id, creatorId, visible, createdAt])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  creatorId String
  creator   User   @relation("user_shares", fields: [creatorId], references: [id])

  // The post to attach the share to
  attachingPostId String @unique
  attachingPost   Post   @relation("attaching_post", fields: [attachingPostId], references: [id])

  // Share IDs
  authorId     String?
  articleId    String?
  agentId      String?
  publisherId  String?
  submissionId String?
  eventId      String?
  reviewId     String?
  postId       String?
  galleryId    String?
  imageId      String?
  characterId  String?
  bookId       String?
  coverId      String?
  // Share Objects  
  article      Article?    @relation("article_shares", fields: [articleId], references: [id])
  author       Author?     @relation("author_shares", fields: [authorId], references: [id])
  agent        Agent?      @relation("agent_shares", fields: [agentId], references: [id])
  publisher    Publisher?  @relation("publisher_shares", fields: [publisherId], references: [id])
  submissions  Submission? @relation("submission_shares", fields: [submissionId], references: [id])
  event        Event?      @relation("event_shares", fields: [eventId], references: [id])
  review       Review?     @relation("review_shares", fields: [reviewId], references: [id])
  book         Book?       @relation("book_shares", fields: [bookId], references: [id])
  character    Character?  @relation("character_shares", fields: [characterId], references: [id])
  cover        Cover?      @relation("cover_shares", fields: [coverId], references: [id])
  gallery      Gallery?    @relation("gallery_shares", fields: [galleryId], references: [id])
  image        Image?      @relation("image_shares", fields: [imageId], references: [id])
  post         Post?       @relation("post_shares", fields: [postId], references: [id])
}

model Like {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @default(now()) @db.Timestamptz(3)
  creatorId    String

  articleId    String?
  authorId     String?
  agentId      String?
  publisherId  String?
  submissionId String?
  eventId      String?
  reviewId     String?
  postId       String?
  galleryId    String?
  imageId      String?
  commentId    String?
  characterId  String?
  bookId       String?
  coverId      String?
  creator      User        @relation("user_likes", fields: [creatorId], references: [id])
  article      Article?    @relation("article_likes", fields: [articleId], references: [id])
  author       User?       @relation("author_likes", fields: [authorId], references: [id])
  agent        Agent?      @relation("agent_likes", fields: [agentId], references: [id])
  publisher    Publisher?  @relation("publisher_likes", fields: [publisherId], references: [id])
  submissions  Submission? @relation("submission_likes", fields: [submissionId], references: [id])
  event        Event?      @relation("event_likes", fields: [eventId], references: [id])
  review       Review?     @relation("review_likes", fields: [reviewId], references: [id])
  book         Book?       @relation("book_likes", fields: [bookId], references: [id])
  character    Character?  @relation("character_likes", fields: [characterId], references: [id])
  comment      Comment?    @relation("comment_likes", fields: [commentId], references: [id])
  cover        Cover?      @relation("cover_likes", fields: [coverId], references: [id])
  gallery      Gallery?    @relation("gallery_likes", fields: [galleryId], references: [id])
  image        Image?      @relation("image_likes", fields: [imageId], references: [id])
  post         Post?       @relation("post_likes", fields: [postId], references: [id])

  @@index([id, creatorId, postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  BLOCKED
  NONE
  READ
  SHARE
  COMMENT
  FEEDBACK
  OWNER
  ADMIN
}

enum BookStatus {
  PRIVATE
  DRAFT
  MANUSCRIPT
  PUBLISHED
}

enum Visibility {
  PUBLIC
  READERS
  REVIEWERS
  ARTISTS
  AUTHORS
  AGENTS
  COMMUNE
  ADMIN
}

enum BlockType {
  BOOK
  GALLERY
  THREAD
  USER
  SITE
}

enum NotifType {
  BOOK
  REVIEW
  SUBMISSION
  COMMENT
  LIKE
  SHARE
  FOLLOW
  FAN
  CHAT
  EVENT
  BLOCK
}

enum ArticleType {
  News
  Article
  Review
  Knowledge
}