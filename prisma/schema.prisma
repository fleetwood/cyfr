generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIGITAL_OCEAN_CYFR_DB")
  // shadowDatabaseUrl = env("HEROKU_DATABASE_URL_STAGE")
}

model User {
  id            String        @id @default(cuid())
  name          String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  slug          String?       @unique
  accounts      Account[]
  blocking      Block[]       @relation("blocked_from_user")
  blocked       Block[]       @relation("user_is_blocked")
  chatMessages  ChatMessage[] @relation("user_chat_messages")
  comments      Comment[]     @relation("user_comments")
  ownedCommunes Commune[]     @relation("commune_owner")
  communes      CommuneUser[] @relation("user_in_commune")
  follower      Follow[]      @relation("user_followed_by")
  following     Follow[]      @relation("user_following")
  galleries     Gallery[]     @relation("user_galleries")
  images        Image[]       @relation("user_images")
  likes         Like[]        @relation("user_likes")
  posts         Post[]        @relation("user_posts")
  sessions      Session[]
  shares        Share[]       @relation("user_shares")
  chats         ChatRoom[]    @relation("user_chats")
  membershipId  String?       @unique
  membership    Membership?   @relation("user_membership", fields: [membershipId], references: [id])
  books         Book[]        @relation("user_books")
}

model Post {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  visible       Boolean  @default(true)
  content       String?
  shareId       String?
  commentId     String?
  authorId      String
  images        Image[]  @relation("post_images")
  likes         Like[]   @relation("post_likes")
  author        User     @relation("user_posts", fields: [authorId], references: [id])
  news          News?    @relation("news_post")
  comment       Post?    @relation("post_comments", fields: [commentId], references: [id])
  post_comments Post[]   @relation("post_comments")
  shares        Share[]  @relation("post_shares")
}

model News {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  visible   Boolean   @default(true)
  slug          String        @unique
  title     String  @unique
  banner    String?
  startDate DateTime?
  endDate   DateTime?
  postId    String    @unique
  post      Post      @relation("news_post", fields: [postId], references: [id])
  audience  Audience
  views     Int       @default(0)
  priority  Int       @default(0)
}

model Gallery {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())
  visible           Boolean    @default(true)
  title             String?
  description       String?
  authorId          String
  shareId           String?
  blocking          Block[]    @relation("blocked_from_gallery")
  commune           Commune?   @relation("gallery_commune")
  author            User       @relation("user_galleries", fields: [authorId], references: [id])
  images            Image[]    @relation("gallery_images")
  likes             Like[]     @relation("gallery_likes")
  shares            Share[]    @relation("gallery_shares")
  book_gallery      Book?      @relation("book_gallery")
  character_gallery Character? @relation("character_gallery")
  chapter_gallery   Chapter?   @relation("chapter_gallery")
  genre_gallery     Genre?     @relation("genre_gallery")
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  visible   Boolean  @default(true)
  title     String?
  authorId  String
  galleryId String?
  shareId   String?
  url       String
  postId    String?
  height    Int?     @default(0)
  width     Int?     @default(0)
  author    User     @relation("user_images", fields: [authorId], references: [id])
  gallery   Gallery? @relation("gallery_images", fields: [galleryId], references: [id])
  post      Post?    @relation("post_images", fields: [postId], references: [id])
  likes     Like[]   @relation("image_likes")
  shares    Share[]  @relation("image_shares")
  cover     Book?    @relation("book_cover")
}

model Like {
  id          String     @id @default(cuid())
  authorId    String
  postId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  galleryId   String?
  imageId     String?
  commentId   String?
  characterId String?
  bookId      String?
  author      User       @relation("user_likes", fields: [authorId], references: [id])
  comment     Comment?   @relation("comment_likes", fields: [commentId], references: [id])
  gallery     Gallery?   @relation("gallery_likes", fields: [galleryId], references: [id])
  image       Image?     @relation("image_likes", fields: [imageId], references: [id])
  post        Post?      @relation("post_likes", fields: [postId], references: [id])
  character   Character? @relation("character_likes", fields: [characterId], references: [id])
  book        Book?      @relation("book_likes", fields: [bookId], references: [id])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  visible   Boolean  @default(true)
  authorId  String
  postId    String?
  galleryId String?
  imageId   String?
  author    User     @relation("user_shares", fields: [authorId], references: [id])
  gallery   Gallery? @relation("gallery_shares", fields: [galleryId], references: [id])
  image     Image?   @relation("image_shares", fields: [imageId], references: [id])
  post      Post?    @relation("post_shares", fields: [postId], references: [id])
}

model Follow {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  isFan       Boolean   @default(false)
  followerId  String
  followingId String?
  follower    User       @relation("user_followed_by", fields: [followerId], references: [id])
  following   User?      @relation("user_following", fields: [followingId], references: [id])
  characterId String?
  character   Character? @relation("character_follows", fields: [characterId], references: [id])
  bookId      String?
  book        Book?      @relation("book_follows", fields: [bookId], references: [id])
}

model ChatRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  visible   Boolean       @default(true)
  party     String        @unique
  messages  ChatMessage[]
  users     User[]        @relation("user_chats")
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  visible    Boolean  @default(true)
  seen       Boolean  @default(false)
  chatRoomId String
  authorId   String
  content    String
  author     User     @relation("user_chat_messages", fields: [authorId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model CommentThread {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  entity       Entity
  requiredRole Role      @default(VIEW)
  blocked      Block[]   @relation("blocked_from_thread")
  comments     Comment[] @relation("thread_comments")
  commune      Commune?  @relation("thread_commune")
}

model Comment {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  threadType Entity
  threadId   String
  authorId   String
  content    String
  visible    Boolean       @default(true)
  author     User          @relation("user_comments", fields: [authorId], references: [id])
  thread     CommentThread @relation("thread_comments", fields: [threadId], references: [id])
  likes      Like[]        @relation("comment_likes")
}

model Commune {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  ownerId   String
  entity    Entity
  galleryId String?        @unique
  threadId  String?        @unique
  gallery   Gallery?       @relation("gallery_commune", fields: [galleryId], references: [id])
  owner     User           @relation("commune_owner", fields: [ownerId], references: [id])
  thread    CommentThread? @relation("thread_commune", fields: [threadId], references: [id])
  users     CommuneUser[]  @relation("commune_users")
}

model CommuneUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  communeId String
  userId    String
  role      Role     @default(VIEW)
  commune   Commune  @relation("commune_users", fields: [communeId], references: [id])
  user      User     @relation("user_in_commune", fields: [userId], references: [id])
}

model Membership {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  active    Boolean   @default(true)
  level     Audience? @default(USER)
  user      User?     @relation("user_membership")
}

model Genre {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  slug          String @unique
  title       String   @unique
  description String
  books       Book[]   @relation("book_genre")
  galleryId   String?  @unique
  gallery     Gallery? @relation("genre_gallery", fields: [galleryId], references: [id])
}

model BookCategory {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  title       String
  description String
  books       Book[]   @relation("book_categories")
}

model Book {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  startedAt  DateTime?      
  completeAt DateTime?      
  active     Boolean        @default(true)
  status     BookStatus?    @default(PRIVATE)
  prospect   Boolean        @default(false)
  fiction    Boolean        @default(true)
  title      String         @unique
  slug          String      @unique
  coverId    String?        @unique
  cover      Image?         @relation("book_cover", fields: [coverId], references: [id])
  genreId    String
  genre      Genre          @relation("book_genre", fields: [genreId], references: [id])
  categories BookCategory[] @relation("book_categories")
  hook       String?
  synopsis   String?
  back       String?
  words      Int            @default(0)
  authors    User[]         @relation("user_books")
  chapters   Chapter[]      @relation("book_chapters")
  characters Character[]    @relation("book_characters")
  galleryId  String?        @unique
  gallery    Gallery?       @relation("book_gallery", fields: [galleryId], references: [id])
  follows    Follow[]       @relation("book_follows")
  likes      Like[]         @relation("book_likes")
}

model Character {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  active      Boolean   @default(true)
  name        String
  familyName  String
  givenName   String
  middleName  String
  thumbnail   String
  age         String
  role        String
  description String
  backstory   String
  title       String
  archetype   String
  likes       Like[]    @relation("character_likes")
  follows     Follow[]  @relation("character_follows")
  books       Book[]    @relation("book_characters")
  chapters    Chapter[] @relation("chapter_characters")
  galleryId   String?   @unique
  gallery     Gallery?  @relation("character_gallery", fields: [galleryId], references: [id])
}

model Chapter {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  active     Boolean     @default(true)
  order      Int
  title      String
  content    String      @default("")
  words      Int         @default(0)
  characters Character[] @relation("chapter_characters")
  bookId     String
  book       Book        @relation("book_chapters", fields: [bookId], references: [id])
  galleryId  String?     @unique
  gallery    Gallery?    @relation("chapter_gallery", fields: [galleryId], references: [id])
}

model Block {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  entity         Entity?
  entityId       String?
  blockedId      String
  galleryId      String?
  threadId       String?
  userId         String
  blockedUser    User           @relation("blocked_from_user", fields: [blockedId], references: [id])
  blockedGallery Gallery?       @relation("blocked_from_gallery", fields: [galleryId], references: [id])
  blockedThread  CommentThread? @relation("blocked_from_thread", fields: [threadId], references: [id])
  user           User           @relation("user_is_blocked", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Audience {
  PUBLIC
  USER
  READER
  MEMBER
  MEMBER_EXP
  AGENT
  AGENT_EXP
  ADMIN
  OWNER
}

enum Role {
  BLOCKED
  VIEW
  COMMENT
  REVIEW
  EDIT
  ADMIN
  OWNER
}

enum Entity {
  INBOX
  GALLERY
  POST
  ARTICLE
  BOOK
  CHARACTER
  USER
}

enum BookStatus {
  PRIVATE
  DRAFT
  MANUSCRIPT
  PUBLISHED
}

enum Visibility {
  PUBLIC
  READERS
  MEMBERS
  AGENTS
  GROUP
}
