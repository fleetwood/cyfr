generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DIGITAL_OCEAN_CYFR_DB_DEV")
  shadowDatabaseUrl = env("DIGITAL_OCEAN_CYFR_DB_SHADOW")
}

model Block {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime       @updatedAt
  expiresAt      DateTime?
  visible        Boolean        @default(true)
  blockType      BlockType
  creatorId      String
  blockedId      String
  galleryId      String?
  threadId       String?
  userId         String
  creator        User           @relation("user_blocks", fields: [creatorId], references: [id])
  blockedGallery Gallery?       @relation("blocked_from_gallery", fields: [galleryId], references: [id])
  blockedThread  CommentThread? @relation("blocked_from_thread", fields: [threadId], references: [id])
  user           User           @relation("user_is_blocked", fields: [userId], references: [id])

  @@index([id, userId, creatorId, threadId, blockType])
}

model User {
  id                            String            @id @default(cuid())
  clerkId                       String?           @unique
  name                          String?           @unique
  email                         String?           @unique
  emailVerified                 DateTime?
  image                         String?
  slug                          String?           @unique
  description                   String?
  membershipId                  String?           @unique
  userId                        String?           @unique
  accounts                      Account[]
  agent                         Agent?            @relation("user_agent")
  artist                        Artist?           @relation("user_artist")
  author                        Author?           @relation("user_author")
  blocks                        Block[]           @relation("user_blocks")
  isBlocked                     Block[]           @relation("user_is_blocked")
  books                         Book[]            @relation("book_owner")
  chatMessages                  ChatMessage[]     @relation("user_chat_messages")
  comments                      Comment[]         @relation("user_comments")
  ownedCommunes                 Commune[]         @relation("commune_owner")
  communes                      CommuneUser[]     @relation("user_in_commune")
  covers                        Cover[]           @relation("user_covers")
  editor                        Editor?           @relation("user_editor")
  events                        Event[]           @relation("user_events")
  follower                      Follow[]          @relation("user_followed_by")
  following                     Follow[]          @relation("user_following")
  galleries                     Gallery[]         @relation("user_galleries")
  images                        Image[]           @relation("user_images")
  authorLikes                   Like[]            @relation("author_likes")
  likes                         Like[]            @relation("user_likes")
  articles                      Article[]         @relation("user_articles")
  Notif_Notif_recipientIdToUser Notif[]           @relation("Notif_recipientIdToUser")
  notifs                        Notif[]           @relation("user_notifs")
  posts                         Post[]            @relation("user_posts")
  reader                        Reader?           @relation("user_reader")
  reviews                       Review[]          @relation("user_reviews")
  sessions                      Session[]
  shares                        Share[]           @relation("user_shares")
  submissions                   Submission[]      @relation("user_submission")
  membership                    Membership?       @relation("user_membership", fields: [membershipId], references: [id])
  event_attendees               event_attendees[]
  event_hosts                   event_hosts[]
  agents                        Agent[]           @relation("agent_authors")
  chats                         ChatRoom[]        @relation("user_chats")

  @@index([id, name, email])
}

model Author {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_author", fields: [userId], references: [id])
  reviews   Review[] @relation("author_reviews")
  shares    Share[]  @relation("author_shares")
  books     Book[]   @relation("book_authors")
}

model Artist {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt
  visible   Boolean   @default(true)
  userId    String    @unique
  user      User      @relation("user_artist", fields: [userId], references: [id])
  reviews   Review[]  @relation("artist_reviews")
  books     Book[]    @relation("book_artists")
  covers    Cover[]   @relation("cover_artists")
  galleries Gallery[] @relation("gallery_artists")
}

model Editor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_editor", fields: [userId], references: [id])
  reviews   Review[] @relation("editor_reviews")
  books     Book[]   @relation("book_editors")
}

model Reader {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  userId    String   @unique
  user      User     @relation("user_reader", fields: [userId], references: [id])
  reviews   Review[] @relation("reader_reviews")
  books     Book[]   @relation("book_readers")
}

model Agent {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @updatedAt
  visible     Boolean    @default(true)
  description String?
  publisherId String?
  userId      String     @unique
  publisher   Publisher? @relation("publisher_agent", fields: [publisherId], references: [id])
  user        User       @relation("user_agent", fields: [userId], references: [id])
  likes       Like[]     @relation("agent_likes")
  reviews     Review[]   @relation("agent_reviews")
  shares      Share[]    @relation("agent_shares")
  authors     User[]     @relation("agent_authors")
  books       Book[]     @relation("book_agents")

  @@index([id])
}

model Article {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  slug            String         @unique
  title           String         @unique
  content         String
  banner          String?
  startDate       DateTime?
  endDate         DateTime?
  views           Int            @default(0)
  priority        Int            @default(0)
  commentThreadId String?        @unique
  type            ArticleType?
  reviewId        String?        @unique
  creatorId       String?
  hook            String?
  likes           Like[]         @relation("article_likes")
  commentThread   CommentThread? @relation("article_comments", fields: [commentThreadId], references: [id])
  creator         User?          @relation("user_articles", fields: [creatorId], references: [id])
  review          Review?        @relation("review_article", fields: [reviewId], references: [id])
  shares          Share[]        @relation("article_shares")

  @@map("News")
}

model Gallery {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime       @updatedAt
  visible           Boolean        @default(true)
  title             String?
  description       String?
  creatorId         String
  commentThreadId   String?        @unique
  permissionId      String?        @unique
  blocking          Block[]        @relation("blocked_from_gallery")
  book_gallery      Book?          @relation("book_gallery")
  chapter_gallery   Chapter?       @relation("chapter_gallery")
  character_gallery Character?     @relation("character_gallery")
  commune           Commune?       @relation("gallery_commune")
  commentThread     CommentThread? @relation("gallery_comments", fields: [commentThreadId], references: [id])
  creator           User           @relation("user_galleries", fields: [creatorId], references: [id])
  permission        Permission?    @relation("gallery_permission", fields: [permissionId], references: [id])
  images            Image[]        @relation("gallery_images")
  likes             Like[]         @relation("gallery_likes")
  shares            Share[]        @relation("gallery_shares")
  artist            Artist[]       @relation("gallery_artists")
}

model Image {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  title           String?
  creatorId       String
  galleryId       String?
  shareId         String?
  url             String         @unique
  postId          String?
  height          Int?           @default(0)
  width           Int?           @default(0)
  commentThreadId String?        @unique
  cover           Cover?         @relation("cover_image")
  commentThread   CommentThread? @relation("image_comments", fields: [commentThreadId], references: [id])
  creator         User           @relation("user_images", fields: [creatorId], references: [id])
  gallery         Gallery?       @relation("gallery_images", fields: [galleryId], references: [id])
  post            Post?          @relation("post_images", fields: [postId], references: [id])
  likes           Like[]         @relation("image_likes")
  shares          Share[]        @relation("image_shares")
}

model Cover {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt
  visible     Boolean  @default(true)
  creatorId   String
  exclusive   Boolean  @default(false)
  description String?
  bookId      String?  @unique
  genreId     String?
  imageId     String   @unique
  book        Book?    @relation("book_cover", fields: [bookId], references: [id])
  creator     User     @relation("user_covers", fields: [creatorId], references: [id])
  genre       Genre?   @relation("genre_covers", fields: [genreId], references: [id])
  image       Image    @relation("cover_image", fields: [imageId], references: [id])
  likes       Like[]   @relation("cover_likes")
  reviews     Review[] @relation("cover_reviews")
  shares      Share[]  @relation("cover_shares")
  artists     Artist[] @relation("cover_artists")
}

model Follow {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime   @updatedAt
  isFan       Boolean    @default(false)
  /// User is ollowed by
  followerId  String
  /// User is following
  followingId String?
  characterId String?
  bookId      String?
  book        Book?      @relation("book_follows", fields: [bookId], references: [id])
  character   Character? @relation("character_follows", fields: [characterId], references: [id])
  follower    User       @relation("user_followed_by", fields: [followerId], references: [id])
  following   User?      @relation("user_following", fields: [followingId], references: [id])

  @@index([id, followerId, followingId])
}

model ChatRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @updatedAt
  visible   Boolean       @default(true)
  party     String        @unique
  messages  ChatMessage[]
  users     User[]        @relation("user_chats")
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt
  visible    Boolean  @default(true)
  seen       Boolean  @default(false)
  chatRoomId String
  creatorId  String
  content    String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  creator    User     @relation("user_chat_messages", fields: [creatorId], references: [id])
}

model CommentThread {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt
  blocked   Block[]    @relation("blocked_from_thread")
  book      Book?      @relation("book_comments")
  chapter   Chapter?   @relation("chapter_comments")
  character Character? @relation("character_comments")
  comments  Comment[]  @relation("thread_comments")
  commune   Commune?   @relation("thread_commune")
  event     Event?     @relation("event_comments")
  gallery   Gallery?   @relation("gallery_comments")
  image     Image?     @relation("image_comments")
  article   Article?   @relation("article_comments")
  post      Post?      @relation("post_comments")
  review    Review?    @relation("review_comments")
}

model Address {
  id               String     @id @default(cuid())
  country          String
  /// State, County, Etc
  district         String
  /// Including number + street
  street           String
  postcode         String
  eventAddress     Event?     @relation("event_address")
  publisherAddress Publisher? @relation("publisher_address")
}

model Notif {
  id                           String    @id @default(cuid())
  createdAt                    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt                    DateTime  @updatedAt
  expiresAt                    DateTime? @db.Timestamptz(3)
  visible                      Boolean   @default(true)
  notifType                    NotifType
  message                      String
  userId                       String?
  eventId                      String?
  recipientId                  String?
  seen                         DateTime  @default(now()) @db.Timestamptz(3)
  event                        Event?    @relation("event_notifs", fields: [eventId], references: [id])
  User_Notif_recipientIdToUser User?     @relation("Notif_recipientIdToUser", fields: [recipientId], references: [id])
  user                         User?     @relation("user_notifs", fields: [userId], references: [id])
}

model Publisher {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt
  visible     Boolean  @default(true)
  name        String
  addressId   String?  @unique
  description String?
  agents      Agent[]  @relation("publisher_agent")
  books       Book[]   @relation("book_publisher")
  likes       Like[]   @relation("publisher_likes")
  address     Address? @relation("publisher_address", fields: [addressId], references: [id])
  shares      Share[]  @relation("publisher_shares")

  @@index([id])
}

model Event {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt
  startAt         DateTime          @db.Timestamptz(3)
  endAt           DateTime          @db.Timestamptz(3)
  attendeeLimit   Int               @default(0)
  visible         Boolean           @default(true)
  title           String
  description     String
  commentThreadId String?           @unique
  addressId       String?           @unique
  permissionId    String?           @unique
  creatorId       String
  address         Address?          @relation("event_address", fields: [addressId], references: [id])
  commentThread   CommentThread?    @relation("event_comments", fields: [commentThreadId], references: [id])
  creator         User              @relation("user_events", fields: [creatorId], references: [id])
  permission      Permission?       @relation("event_permission", fields: [permissionId], references: [id])
  likes           Like[]            @relation("event_likes")
  notifs          Notif[]           @relation("event_notifs")
  shares          Share[]           @relation("event_shares")
  event_attendees event_attendees[]
  event_hosts     event_hosts[]
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  creatorId String
  likes     Like[]   @relation("submission_likes")
  reviews   Review[] @relation("submission_reviews")
  shares    Share[]  @relation("submission_shares")
  creator   User     @relation("user_submission", fields: [creatorId], references: [id])
}

model Review {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  creatorId       String
  commentThreadId String?        @unique
  authorId        String?
  agentId         String?
  artistId        String?
  editorId        String?
  bookId          String?
  characterId     String?
  chapterId       String?
  submissionId    String?
  coverId         String?
  readerId        String?
  likes           Like[]         @relation("review_likes")
  article         Article?       @relation("review_article")
  agent           Agent?         @relation("agent_reviews", fields: [agentId], references: [id])
  artist          Artist?        @relation("artist_reviews", fields: [artistId], references: [id])
  author          Author?        @relation("author_reviews", fields: [authorId], references: [id])
  book            Book?          @relation("book_reviews", fields: [bookId], references: [id])
  chapter         Chapter?       @relation("chapter_reviews", fields: [chapterId], references: [id])
  character       Character?     @relation("character_reviews", fields: [characterId], references: [id])
  commentThread   CommentThread? @relation("review_comments", fields: [commentThreadId], references: [id])
  cover           Cover?         @relation("cover_reviews", fields: [coverId], references: [id])
  creator         User           @relation("user_reviews", fields: [creatorId], references: [id])
  editor          Editor?        @relation("editor_reviews", fields: [editorId], references: [id])
  readers         Reader?        @relation("reader_reviews", fields: [readerId], references: [id])
  submission      Submission?    @relation("submission_reviews", fields: [submissionId], references: [id])
  shares          Share[]        @relation("review_shares")
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt DateTime      @updatedAt
  threadId  String
  creatorId String
  content   String
  visible   Boolean       @default(true)
  creator   User          @relation("user_comments", fields: [creatorId], references: [id])
  thread    CommentThread @relation("thread_comments", fields: [threadId], references: [id])
  likes     Like[]        @relation("comment_likes")
}

model Commune {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @updatedAt
  description  String?
  ownerId      String
  galleryId    String?        @unique
  threadId     String?        @unique
  permissionId String?        @unique
  gallery      Gallery?       @relation("gallery_commune", fields: [galleryId], references: [id])
  owner        User           @relation("commune_owner", fields: [ownerId], references: [id])
  permission   Permission?    @relation("commune_permission", fields: [permissionId], references: [id])
  thread       CommentThread? @relation("thread_commune", fields: [threadId], references: [id])
  users        CommuneUser[]  @relation("commune_users")
}

model CommuneUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  communeId String
  userId    String
  commune   Commune  @relation("commune_users", fields: [communeId], references: [id])
  user      User     @relation("user_in_commune", fields: [userId], references: [id])
}

model Membership {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @updatedAt
  expiresAt   DateTime?
  visible     Boolean        @default(true)
  description String?
  typeId      String
  type        MembershipType @relation("membership_type", fields: [typeId], references: [id])
  user        User?          @relation("user_membership")

  @@index([id])
}

model MembershipType {
  id                 String       @id @default(cuid())
  createdAt          DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime     @updatedAt
  level              Int          @default(-1)
  name               String       @default("Need a name")
  annualDescription  String       @default("No description")
  annualPrice        Int          @default(-1)
  description        String       @default("No description")
  monthlyDescription String       @default("No description")
  monthlyPrice       Int          @default(-1)
  paid               Boolean      @default(false)
  memberships        Membership[] @relation("membership_type")

  @@index([id])
}

model Genre {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt
  slug        String   @unique
  title       String   @unique
  description String
  books       Book[]   @relation("book_genre")
  covers      Cover[]  @relation("genre_covers")
}

model BookCategory {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  books       Book[]   @relation("book_categories")
}

model Book {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  ownerId         String
  startedAt       DateTime?      @db.Timestamptz(3)
  completeAt      DateTime?      @db.Timestamptz(3)
  visible         Boolean        @default(true)
  prospect        Boolean        @default(false)
  fiction         Boolean        @default(true)
  status          BookStatus?    @default(PRIVATE)
  title           String         @unique
  slug            String         @unique
  ISBN            String?
  EISBN           String?
  hook            String?
  synopsis        String?
  back            String?
  words           Int            @default(0)
  reads           Int            @default(0)
  purchases       Int            @default(0)
  genreId         String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  publisherId     String?
  permissionId    String?        @unique
  commentThread   CommentThread? @relation("book_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("book_gallery", fields: [galleryId], references: [id])
  genre           Genre          @relation("book_genre", fields: [genreId], references: [id])
  owner           User           @relation("book_owner", fields: [ownerId], references: [id])
  permission      Permission?    @relation("book_permission", fields: [permissionId], references: [id])
  publisher       Publisher?     @relation("book_publisher", fields: [publisherId], references: [id])
  chapters        Chapter[]      @relation("book_chapters")
  cover           Cover?         @relation("book_cover")
  follows         Follow[]       @relation("book_follows")
  likes           Like[]         @relation("book_likes")
  reviews         Review[]       @relation("book_reviews")
  shares          Share[]        @relation("book_shares")
  agent           Agent[]        @relation("book_agents")
  artists         Artist[]       @relation("book_artists")
  authors         Author[]       @relation("book_authors")
  categories      BookCategory[] @relation("book_categories")
  characters      Character[]    @relation("book_characters")
  editor          Editor[]       @relation("book_editors")
  readers         Reader[]       @relation("book_readers")
}

model Permission {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt
  public    Role[]
  member    Role[]
  agent     Role[]
  fan       Role[]
  follower  Role[]
  friend    Role[]
  artist    Role[]
  author    Role[]
  editor    Role[]
  following Role[]
  stan      Role[]
  book      Book?      @relation("book_permission")
  chapter   Chapter?   @relation("chapter_permission")
  character Character? @relation("character_permission")
  commune   Commune?   @relation("commune_permission")
  event     Event?     @relation("event_permission")
  gallery   Gallery?   @relation("gallery_permission")
}

model Character {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  name            String
  familyName      String
  givenName       String
  middleName      String
  thumbnail       String
  age             String
  role            String
  description     String
  backstory       String
  title           String
  archetype       String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  permissionId    String?        @unique
  commentThread   CommentThread? @relation("character_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("character_gallery", fields: [galleryId], references: [id])
  permission      Permission?    @relation("character_permission", fields: [permissionId], references: [id])
  follows         Follow[]       @relation("character_follows")
  likes           Like[]         @relation("character_likes")
  reviews         Review[]       @relation("character_reviews")
  shares          Share[]        @relation("character_shares")
  books           Book[]         @relation("book_characters")
  chapters        Chapter[]      @relation("chapter_characters")
}

model Chapter {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  order           Int
  title           String
  content         String         @default("")
  words           Int            @default(0)
  reads           Int            @default(0)
  bookId          String
  galleryId       String?        @unique
  commentThreadId String?        @unique
  permissionId    String?        @unique
  book            Book           @relation("book_chapters", fields: [bookId], references: [id])
  commentThread   CommentThread? @relation("chapter_comments", fields: [commentThreadId], references: [id])
  gallery         Gallery?       @relation("chapter_gallery", fields: [galleryId], references: [id])
  permission      Permission?    @relation("chapter_permission", fields: [permissionId], references: [id])
  reviews         Review[]       @relation("chapter_reviews")
  characters      Character[]    @relation("chapter_characters")
}

model Post {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
  visible         Boolean        @default(true)
  creatorId       String
  content         String?
  commentThreadId String?        @unique
  images          Image[]        @relation("post_images")
  likes           Like[]         @relation("post_likes")
  commentThread   CommentThread? @relation("post_comments", fields: [commentThreadId], references: [id])
  creator         User           @relation("user_posts", fields: [creatorId], references: [id])
  share           Share?         @relation("attaching_post")
  shares          Share[]        @relation("post_shares")

  @@index([id, creatorId, visible, createdAt])
}

model Share {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime    @updatedAt
  creatorId       String
  postId          String?
  imageId         String?
  galleryId       String?
  bookId          String?
  characterId     String?
  coverId         String?
  eventId         String?
  agentId         String?
  attachingPostId String      @unique
  authorId        String?
  publisherId     String?
  reviewId        String?
  submissionId    String?
  articleId       String?
  agent           Agent?      @relation("agent_shares", fields: [agentId], references: [id])
  article         Article?    @relation("article_shares", fields: [articleId], references: [id])
  attachingPost   Post        @relation("attaching_post", fields: [attachingPostId], references: [id])
  author          Author?     @relation("author_shares", fields: [authorId], references: [id])
  book            Book?       @relation("book_shares", fields: [bookId], references: [id])
  character       Character?  @relation("character_shares", fields: [characterId], references: [id])
  cover           Cover?      @relation("cover_shares", fields: [coverId], references: [id])
  creator         User        @relation("user_shares", fields: [creatorId], references: [id])
  event           Event?      @relation("event_shares", fields: [eventId], references: [id])
  gallery         Gallery?    @relation("gallery_shares", fields: [galleryId], references: [id])
  image           Image?      @relation("image_shares", fields: [imageId], references: [id])
  post            Post?       @relation("post_shares", fields: [postId], references: [id])
  publisher       Publisher?  @relation("publisher_shares", fields: [publisherId], references: [id])
  review          Review?     @relation("review_shares", fields: [reviewId], references: [id])
  submissions     Submission? @relation("submission_shares", fields: [submissionId], references: [id])
}

model Like {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @updatedAt
  creatorId    String
  authorId     String?
  agentId      String?
  publisherId  String?
  submissionId String?
  eventId      String?
  reviewId     String?
  postId       String?
  galleryId    String?
  imageId      String?
  commentId    String?
  characterId  String?
  bookId       String?
  coverId      String?
  articleId    String?
  agent        Agent?      @relation("agent_likes", fields: [agentId], references: [id])
  article      Article?    @relation("article_likes", fields: [articleId], references: [id])
  author       User?       @relation("author_likes", fields: [authorId], references: [id])
  book         Book?       @relation("book_likes", fields: [bookId], references: [id])
  character    Character?  @relation("character_likes", fields: [characterId], references: [id])
  comment      Comment?    @relation("comment_likes", fields: [commentId], references: [id])
  cover        Cover?      @relation("cover_likes", fields: [coverId], references: [id])
  creator      User        @relation("user_likes", fields: [creatorId], references: [id])
  event        Event?      @relation("event_likes", fields: [eventId], references: [id])
  gallery      Gallery?    @relation("gallery_likes", fields: [galleryId], references: [id])
  image        Image?      @relation("image_likes", fields: [imageId], references: [id])
  post         Post?       @relation("post_likes", fields: [postId], references: [id])
  publisher    Publisher?  @relation("publisher_likes", fields: [publisherId], references: [id])
  review       Review?     @relation("review_likes", fields: [reviewId], references: [id])
  submissions  Submission? @relation("submission_likes", fields: [submissionId], references: [id])

  @@index([id, creatorId, postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model event_attendees {
  A     String
  B     String
  User  User   @relation(fields: [A], references: [id], onDelete: Cascade)
  Event Event  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_event_attendees_AB_unique")
  @@index([B], map: "_event_attendees_B_index")
  @@map("_event_attendees")
}

model event_hosts {
  A     String
  B     String
  User  User   @relation(fields: [A], references: [id], onDelete: Cascade)
  Event Event  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_event_hosts_AB_unique")
  @@index([B], map: "_event_hosts_B_index")
  @@map("_event_hosts")
}

enum Role {
  BLOCKED
  NONE
  READ
  SHARE
  COMMENT
  FEEDBACK
  OWNER
  ADMIN
}

enum BookStatus {
  PRIVATE
  DRAFT
  MANUSCRIPT
  PUBLISHED
}

enum Visibility {
  PUBLIC
  READERS
  REVIEWERS
  ARTISTS
  AUTHORS
  AGENTS
  COMMUNE
  ADMIN
}

enum BlockType {
  BOOK
  GALLERY
  THREAD
  USER
  SITE
}

enum NotifType {
  BOOK
  REVIEW
  SUBMISSION
  COMMENT
  LIKE
  SHARE
  FOLLOW
  FAN
  CHAT
  EVENT
  BLOCK
  COMMUNE
  FEEDBACK
  MESSAGE
  BILLING
}

enum ArticleType {
  News
  Article
  Review
  Knowledge
}
